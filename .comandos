Comandos
# nvm ls - lista todas as versões do node disponíveis.
# nvm install lts/hydrogen - a versão lts escolhida para o projeto.
# nvm --help - lista todos os possíveis comandos do nvm.
# nvm alias default lts/hydrogen - este comando define uma versão padrão caso o ambiente de desenvolvimento seja reiniciado.
# npm init - inicializa o package.json, mostrando as pedendencias do projeto.
# npm install next@13.1.6 - instalando o next na versão x
# npm install react@18.2.0 - instalando o react na versão x
# npm install react-dom@18.2.0 - instalando o react-dom na versão x
# npm run dev - roda o script criado com o nome dev dentro da tag "scrips" dentro do package.json
# npm install prettier -D

Docker
# (labels: ) <=> (<=>) => finish line, not used.

# compose.yaml, config:
# database:
#   image: "postgres:16.0-alpine3.18"
#   environment:
#     POSTGRES_PASSWORD: "pgpass" 
# with this approach it is now possible to connect to DBSM-or-SGBD Postgress.

# starting compose.yaml from a path:
# docker compose -f ./infra/compose.yaml up -d <=> -f (-file), -d (detach) => run the process in background, letting free the terminal to use.
# recreating container: docker compose -f ./infra/compose.yaml up -d --force-recreate <=> same as docker down and up again.

PSql Cliente
# sudo apt install postgresql-client
# connecting with postgres after set ports: - "5432:5432" on compose.yaml
# psql -h localhost -p 5432 -U local_user -d local_db
# psql --host=localhost --username=postgres --port=5432
# testing: select 1 + 1; terminal response: 2;

pg or nodepostgres
# npm install pg@18.11.3
# another cliente to connect with database, but throw nodejs.

Informações
# .nvmrc - define instruções padrão para o projeto- o RC do final significa Run Commands.

